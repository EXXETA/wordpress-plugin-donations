<?xml version="1.0" ?>
<!--
  ~ Copyright 2020-2021 EXXETA AG, Marius Schuppert
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program. If not, see <https://www.gnu.org/licenses/>.
-->
<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!-- used to pass config values to the storefront templating engine -->
        <service id="WWFDonationPlugin\Subscriber\Storefront\Subscriber">
            <tag name="kernel.event_subscriber"/>
            <argument type="service" id="Shopware\Core\System\SystemConfig\SystemConfigService"/>
            <argument type="service" id="WWFDonationPlugin\Service\Logger"/>
        </service>

        <!-- central logging service for this plugin -->
        <service id="WWFDonationPlugin\Service\Logger" class="Monolog\Logger">
            <factory service="Shopware\Core\Framework\Log\LoggerFactory" method="createRotating"/>
            <argument type="string">wwf_logs</argument>
        </service>

        <!-- used to "simulate" virtual products via an "endless" stock by resetting the stock amount if necessary -->
        <service id="Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdater"
                 class="WWFDonationPlugin\Subscriber\WWFProductStockUpdater" public="true">
            <argument type="service" id="Doctrine\DBAL\Connection"/>
            <argument type="service" id="event_dispatcher" />
            <argument type="service" id="WWFDonationPlugin\Service\Logger"/>
            <argument type="service" id="product.repository"/>
            <tag name="kernel.event_subscriber"/>
        </service>

        <service id="WWFDonationPlugin\Service\CharitySettingsManager" public="true">
            <argument type="service" id="Shopware\Core\System\SystemConfig\SystemConfigService"/>
        </service>

        <service id="WWFDonationPlugin\Service\DonationPluginInstance" public="true">
            <argument type="service" id="WWFDonationPlugin\Service\CharitySettingsManager"/>
            <argument type="service" id="WWFDonationPlugin\Service\ProductService"/>
        </service>

        <service id="WWFDonationPlugin\Service\ShopwareReportHandler">
            <argument type="service" id="Shopware\Core\System\SystemConfig\SystemConfigService"/>
            <argument type="service" id="wwf_donation_report.repository"/>
            <argument type="service" id="sales_channel.repository"/>
            <argument type="service" id="Shopware\Core\Content\Mail\Service\MailService"/>
        </service>

        <service id="WWFDonationPlugin\Service\SimpleCharityProductManager">
        </service>

        <service id="WWFDonationPlugin\Service\MediaService" public="false" shared="true" lazy="false">
            <argument type="service" id="WWFDonationPlugin\Service\SimpleCharityProductManager"/>
            <argument type="service" id="media.repository"/>
            <argument type="service" id="media_folder.repository"/>
            <argument type="service" id="product_media.repository"/>
            <argument type="service" id="Shopware\Core\Content\Media\File\FileSaver"/>
        </service>

        <service id="WWFDonationPlugin\Service\ProductService" public="true">
            <argument type="service" id="tax.repository"/>
            <argument type="service" id="product.repository"/>
            <argument type="service" id="product_category.repository"/>
            <argument type="service" id="product_manufacturer.repository"/>
            <argument type="service" id="sales_channel.repository"/>
            <argument type="service" id="order_line_item.repository"/>
            <argument type="service" id="WWFDonationPlugin\Service\MediaService"/>
        </service>

        <!-- "wwfBanner" twig extension of this plugin to render the wwf-banner -->
        <service id="WWFDonationPlugin\Twig\BannerExtension" public="true">
            <call method="setMediaService">
                <argument type="service" id="WWFDonationPlugin\Service\MediaService"/>
            </call>
            <call method="setCsrfTokenManager">
                <argument type="service" id="Symfony\Component\Security\Csrf\CsrfTokenManagerInterface"/>
            </call>
            <call method="setDonationPluginInstance">
                <argument type="service" id="WWFDonationPlugin\Service\DonationPluginInstance"/>
            </call>
            <call method="setProductService">
                <argument type="service" id="WWFDonationPlugin\Service\ProductService"/>
            </call>
            <call method="setLogger">
                <argument type="service" id="WWFDonationPlugin\Service\Logger"/>
            </call>
            <tag name="twig.extension"/>
        </service>

        <!-- overwrite a twig extension of the core to handle empty input (here: if no mini-banner is used) -->
        <service id="WWFDonationPlugin\Twig\SeoUrlNullableExtension">
            <argument type="service" id="twig.extension.routing"/>
            <argument type="service" id="Shopware\Core\Content\Seo\SeoUrlPlaceholderHandlerInterface"/>
            <tag name="twig.extension"/>
        </service>

        <!-- registering the report entity -->
        <service id="WWFDonationPlugin\Entity\DonationReportDefinition">
            <tag name="shopware.entity.definition" entity="wwf_donation_report"/>
        </service>

        <!-- report job scheduling -->
        <service id="WWFDonationPlugin\Service\ScheduledTask\ReportTask">
            <tag name="shopware.scheduled.task"/>
        </service>

        <service id="WWFDonationPlugin\Service\ScheduledTask\ReportTaskHandler">
            <argument type="service" id="scheduled_task.repository"/>
            <argument type="service" id="WWFDonationPlugin\Service\Logger"/>
            <argument type="service" id="WWFDonationPlugin\Service\DonationPluginInstance"/>
            <argument type="service" id="WWFDonationPlugin\Service\ShopwareReportHandler"/>
            <tag name="messenger.message_handler"/>
        </service>

        <!-- controller -->
        <service id="WWFDonationPlugin\Controller\WWFCartController" public="true">
            <argument type="service" id="Shopware\Core\Checkout\Cart\SalesChannel\CartService"/>
            <argument type="service" id="Shopware\Core\Checkout\Cart\LineItemFactoryRegistry"/>
            <argument type="service" id="WWFDonationPlugin\Service\ProductService"/>
            <argument type="service" id="WWFDonationPlugin\Service\Logger"/>

            <call method="setContainer">
                <argument type="service" id="service_container" />
            </call>
        </service>

        <!-- registering custom admin component of this plugin -->
        <service id="WWFDonationPlugin\DataResolver\WWFBannerCmsElementResolver">
            <tag name="shopware.cms.data_resolver"/>
        </service>

        <!-- cli command for debugging report generation -->
        <service id="WWFDonationPlugin\Command\ReportGenerationCommand">
            <argument type="service" id="WWFDonationPlugin\Service\DonationPluginInstance"/>
            <argument type="service" id="WWFDonationPlugin\Service\ShopwareReportHandler"/>
            <tag name="console.command"/>
        </service>
    </services>
</container>